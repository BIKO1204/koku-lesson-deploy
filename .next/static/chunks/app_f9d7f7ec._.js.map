{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/yukia/Downloads/koku-lesson-planner/app/providers.tsx"],"sourcesContent":["// app/providers.tsx\r\n\"use client\"\r\n\r\nimport { SessionProvider } from \"next-auth/react\"\r\n\r\nexport function Providers({ children }: { children: React.ReactNode }) {\r\n  return <SessionProvider>{children}</SessionProvider>\r\n}\r\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AAGpB;AAFA;;;AAIO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBAAO,6LAAC,iJAAA,CAAA,kBAAe;kBAAE;;;;;;AAC3B;KAFgB","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/yukia/Downloads/koku-lesson-planner/app/firebaseConfig.js"],"sourcesContent":["// firebaseConfig.js\r\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// .env.local に以下のような環境変数を必ず設定してください\r\n// NEXT_PUBLIC_FIREBASE_API_KEY=\r\n// NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=\r\n// NEXT_PUBLIC_FIREBASE_PROJECT_ID=\r\n// NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=\r\n// NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=\r\n// NEXT_PUBLIC_FIREBASE_APP_ID=\r\n// NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=\r\n\r\nconst firebaseConfig = {\r\n  apiKey:             process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\r\n  authDomain:         process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n  projectId:          process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n  storageBucket:      process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId:  process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId:              process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n  measurementId:      process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\r\n};\r\n\r\n// Firebaseがすでに初期化済みならそのインスタンスを取得し、未初期化なら新規初期化する\r\nlet app;\r\nif (!getApps().length) {\r\n  app = initializeApp(firebaseConfig);\r\n} else {\r\n  app = getApp();\r\n}\r\n\r\n// Firestore、Auth、Storage のインスタンスを取得\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nconst storage = getStorage(app);\r\n\r\nexport { app, db, auth, storage };\r\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;AAgBE;AAftB;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;AAEA,oCAAoC;AACpC,gCAAgC;AAChC,oCAAoC;AACpC,mCAAmC;AACnC,uCAAuC;AACvC,4CAA4C;AAC5C,+BAA+B;AAC/B,uCAAuC;AAEvC,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,gDAAgD;AAChD,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,uLAAA,CAAA,SAAM,AAAD;AACb;AAEA,oCAAoC;AACpC,MAAM,KAAK,CAAA,GAAA,sKAAA,CAAA,eAAY,AAAD,EAAE;AACxB,MAAM,OAAO,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,UAAU,CAAA,GAAA,oKAAA,CAAA,aAAU,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/yukia/Downloads/koku-lesson-planner/app/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  ReactNode,\r\n} from \"react\";\r\nimport { auth } from \"../firebaseConfig\";\r\nimport {\r\n  onAuthStateChanged,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  signOut,\r\n  User,\r\n} from \"firebase/auth\";\r\n\r\nexport type AuthContextType = {\r\n  user: User | null;\r\n  loading: boolean;\r\n  loginWithGoogle: () => Promise<void>;\r\n  logout: () => Promise<void>;\r\n};\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\r\n      setUser(currentUser);\r\n      setLoading(false);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Googleログイン関数\r\n  const loginWithGoogle = async () => {\r\n    const provider = new GoogleAuthProvider();\r\n    await signInWithPopup(auth, provider);\r\n  };\r\n\r\n  const logout = async () => {\r\n    await signOut(auth);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, loginWithGoogle, logout }}>\r\n      {loading ? <div>認証中...</div> : children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth(): AuthContextType {\r\n  const ctx = useContext(AuthContext);\r\n  if (!ctx) throw new Error(\"useAuth must be inside AuthProvider\");\r\n  return ctx;\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAVA;;;;AAyBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAA2B;;IAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,MAAM,cAAc,CAAA,GAAA,wNAAA,CAAA,qBAAkB,AAAD,EAAE,wHAAA,CAAA,OAAI;sDAAE,CAAC;oBAC5C,QAAQ;oBACR,WAAW;gBACb;;YACA;0CAAO,IAAM;;QACf;iCAAG,EAAE;IAEL,eAAe;IACf,MAAM,kBAAkB;QACtB,MAAM,WAAW,IAAI,wNAAA,CAAA,qBAAkB;QACvC,MAAM,CAAA,GAAA,qNAAA,CAAA,kBAAe,AAAD,EAAE,wHAAA,CAAA,OAAI,EAAE;IAC9B;IAEA,MAAM,SAAS;QACb,MAAM,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE,wHAAA,CAAA,OAAI;IACpB;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS;YAAiB;QAAO;kBACnE,wBAAU,6LAAC;sBAAI;;;;;mBAAe;;;;;;AAGrC;GA3BgB;KAAA;AA6BT,SAAS;;IACd,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IACvB,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;IAC1B,OAAO;AACT;IAJgB","debugId":null}}]
}