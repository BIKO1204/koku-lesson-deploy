{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/yukia/Downloads/koku-lesson-planner/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import GoogleProvider from \"next-auth/providers/google\";\r\nimport type { JWT } from \"next-auth/jwt\";\r\nimport type { Session } from \"next-auth\";\r\nimport type { AdapterUser } from \"next-auth/adapters\";\r\n\r\nlet NextAuthHandler: any; // 後で動的にセット\r\n\r\nasync function refreshAccessToken(token: JWT): Promise<JWT> {\r\n  if (!token.refreshToken) throw new Error(\"No refresh token available\");\r\n\r\n  const response = await fetch(\"https://oauth2.googleapis.com/token\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n    body: new URLSearchParams({\r\n      client_id: process.env.GOOGLE_CLIENT_ID!,\r\n      client_secret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      grant_type: \"refresh_token\",\r\n      refresh_token: String(token.refreshToken),\r\n    }),\r\n  });\r\n\r\n  const refreshedTokens = await response.json();\r\n\r\n  if (!response.ok) throw refreshedTokens;\r\n\r\n  return {\r\n    ...token,\r\n    accessToken: refreshedTokens.access_token,\r\n    accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\r\n    refreshToken: refreshedTokens.refresh_token ?? token.refreshToken,\r\n  };\r\n}\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      authorization: {\r\n        params: {\r\n          access_type: \"offline\",\r\n          prompt: \"consent\",\r\n          scope:\r\n            \"openid email profile https://www.googleapis.com/auth/drive.file\",\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n\r\n  callbacks: {\r\n    async jwt({\r\n      token,\r\n      account,\r\n      user,\r\n    }: {\r\n      token: JWT;\r\n      account?: any | null;\r\n      user?: AdapterUser | null;\r\n    }): Promise<JWT> {\r\n      if (account) {\r\n        return {\r\n          ...token,\r\n          accessToken: account.access_token,\r\n          refreshToken: account.refresh_token,\r\n          accessTokenExpires: (account.expires_at ?? 0) * 1000,\r\n          user,\r\n        };\r\n      }\r\n\r\n      const expires = typeof token.accessTokenExpires === \"number\" ? token.accessTokenExpires : 0;\r\n\r\n      if (Date.now() < expires) {\r\n        return token;\r\n      }\r\n\r\n      return await refreshAccessToken(token);\r\n    },\r\n\r\n    async session(params: {\r\n      session: Session;\r\n      token: JWT;\r\n      user: AdapterUser;\r\n    }): Promise<Session> {\r\n      const { session, token } = params;\r\n      (session as any).accessToken = token.accessToken;\r\n      (session as any).error = (token as any).error;\r\n      return session;\r\n    },\r\n  },\r\n};\r\n\r\n// 動的に NextAuth をimportしてからエクスポートするハンドラを作る\r\nasync function getHandler() {\r\n  if (!NextAuthHandler) {\r\n    const mod = await import(\"next-auth\");\r\n    NextAuthHandler = mod.default;\r\n  }\r\n  return NextAuthHandler(authOptions);\r\n}\r\n\r\nexport async function GET(req: Request, res: Response) {\r\n  const handler = await getHandler();\r\n  return handler(req, res);\r\n}\r\n\r\nexport async function POST(req: Request, res: Response) {\r\n  const handler = await getHandler();\r\n  return handler(req, res);\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;AAKA,IAAI,iBAAsB,WAAW;AAErC,eAAe,mBAAmB,KAAU;IAC1C,IAAI,CAAC,MAAM,YAAY,EAAE,MAAM,IAAI,MAAM;IAEzC,MAAM,WAAW,MAAM,MAAM,uCAAuC;QAClE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAoC;QAC/D,MAAM,IAAI,gBAAgB;YACxB,WAAW,QAAQ,GAAG,CAAC,gBAAgB;YACvC,eAAe,QAAQ,GAAG,CAAC,oBAAoB;YAC/C,YAAY;YACZ,eAAe,OAAO,MAAM,YAAY;QAC1C;IACF;IAEA,MAAM,kBAAkB,MAAM,SAAS,IAAI;IAE3C,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM;IAExB,OAAO;QACL,GAAG,KAAK;QACR,aAAa,gBAAgB,YAAY;QACzC,oBAAoB,KAAK,GAAG,KAAK,gBAAgB,UAAU,GAAG;QAC9D,cAAc,gBAAgB,aAAa,IAAI,MAAM,YAAY;IACnE;AACF;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,QAAQ;oBACN,aAAa;oBACb,QAAQ;oBACR,OACE;gBACJ;YACF;QACF;KACD;IAED,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAEnC,WAAW;QACT,MAAM,KAAI,EACR,KAAK,EACL,OAAO,EACP,IAAI,EAKL;YACC,IAAI,SAAS;gBACX,OAAO;oBACL,GAAG,KAAK;oBACR,aAAa,QAAQ,YAAY;oBACjC,cAAc,QAAQ,aAAa;oBACnC,oBAAoB,CAAC,QAAQ,UAAU,IAAI,CAAC,IAAI;oBAChD;gBACF;YACF;YAEA,MAAM,UAAU,OAAO,MAAM,kBAAkB,KAAK,WAAW,MAAM,kBAAkB,GAAG;YAE1F,IAAI,KAAK,GAAG,KAAK,SAAS;gBACxB,OAAO;YACT;YAEA,OAAO,MAAM,mBAAmB;QAClC;QAEA,MAAM,SAAQ,MAIb;YACC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;YAC1B,QAAgB,WAAW,GAAG,MAAM,WAAW;YAC/C,QAAgB,KAAK,GAAG,AAAC,MAAc,KAAK;YAC7C,OAAO;QACT;IACF;AACF;AAEA,0CAA0C;AAC1C,eAAe;IACb,IAAI,CAAC,iBAAiB;QACpB,MAAM,MAAM;QACZ,kBAAkB,IAAI,OAAO;IAC/B;IACA,OAAO,gBAAgB;AACzB;AAEO,eAAe,IAAI,GAAY,EAAE,GAAa;IACnD,MAAM,UAAU,MAAM;IACtB,OAAO,QAAQ,KAAK;AACtB;AAEO,eAAe,KAAK,GAAY,EAAE,GAAa;IACpD,MAAM,UAAU,MAAM;IACtB,OAAO,QAAQ,KAAK;AACtB","debugId":null}}]
}